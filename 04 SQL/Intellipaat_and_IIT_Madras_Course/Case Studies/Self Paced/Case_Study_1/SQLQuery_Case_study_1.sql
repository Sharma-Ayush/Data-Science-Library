--SQL Case Study - 1

/*
Problem Statement:
You are a database administrator. You want to use the data to answer a few
questions about your customers, especially about the sales and profit coming
from different states, money spent in marketing and various other factors such as
COGS (Cost of Goods Sold), budget profit etc. You plan on using these insights
to help find out which items are being sold the most. You have been provided
with the sample of the overall customer data due to privacy issues. But you hope
that these samples are enough for you to write fully functioning SQL queries to
help answer the questions.
*/

/*
Dataset:
The 3 key datasets for this case study:
a. FactTable: The Fact Table has 14 columns mentioned below and 4200
rows. Date, ProductID, Profit, Sales, Margin, COGS, Total Expenses,
Marketing, Inventory, Budget Profit, Budget COGS, Budget Margin, Budget
Sales, and Area Code
Note: COGS stands for Cost of Goods Sold
b. ProductTable: The ProductTable has four columns named Product Type,
Product, ProductID, and Type. It has 13 rows which can be broken down
into further details to retrieve the information mentioned in theFactTable.
c. LocationTable: Finally, the LocationTable has 156 rows and follows a
similar approach to ProductTable. It has four columns named Area Code,
State, Market, and Market Size.
*/

--Tasks to be performed:
select * from dbo.fact;
select * from dbo.location;
select * from dbo.product;

--1. Display the number of states present in the LocationTable.
Select count(distinct state) as [No. of States]
from dbo.Location
where state is not NULL;

--2. How many products are of regular type?
Select count(*) as [No. of regular products] 
from dbo.Product 
where type = 'Regular';

--3. How much spending has been done on marketing of product ID 1?
Select SUM(Marketing) as [Total marketing expense] 
from dbo.fact 
where ProductID = 1;

--4. What is the minimum sales of a product?
Select TOP(1) WITH TIES ProductID, SUM(Sales) as [Total Sales] 
from dbo.fact 
group by ProductID
order by [Total Sales];

--5. Display the max Cost of Good Sold (COGS).
Select MAX(COGS) as [Max. COGS] 
from dbo.Fact;

--6. Display the details of the product where product type is coffee.
Select *
from dbo.Product 
where Product_Type = 'Coffee';

--7. Display the details where total expenses are greater than 40.
Select *
from dbo.fact
where Total_Expenses > 40;

--8. What is the average sales in area code 719?
Select AVG(Sales) as [Avg. Sales]
from dbo.Fact
where Area_Code = 719;

--9. Find out the total profit generated by Colorado state.
Select SUM(Profit) as [Total Profit]
from dbo.Fact
where Area_Code in (Select Area_Code 
				    from dbo.Location 
					where state = 'Colorado');

--10. Display the average inventory for each product ID.
Select ProductID, AVG(Inventory) as [Avg. Inventory] 
from dbo.fact 
group by ProductID;

--11. Display state in a sequential order in a Location Table.
Select Distinct State as State
from dbo.Location
order by State;

--12. Display the average budget of the Product where the average budget margin should be greater than 100.
--Assuming by budget it is meant the budget ofr producing the product and selling it, that is Budget_Sales - Budget_Profit
Select ProductID, AVG(Budget_Sales - Budget_Profit) as [Avg. Budget]
from dbo.fact
group by ProductID
having AVG(Budget_Margin) > 100;

--13. What is the total sales done on date 2010-01-01?
Select SUM(Sales) as [Total Sales]
from dbo.fact
where date = '20100101';

--14. Display the average total expense of each product ID on an individual date.
Select ProductID, Date, AVG(Total_Expenses) as [Avg. Total Expense]
from dbo.fact
group by ProductID, Date;

--15. Display the table with the following attributes such as date, productID, product_type, product, sales, profit, state, area_code.
Select F.Date, P.ProductId, P.Product_Type, P.Product, F.Sales, F.Profit, L.State, L.Area_Code
from dbo.Product as P
	 inner join dbo.fact as F
		on P.ProductId = F.ProductId
	 inner join dbo.Location as L
		on F.Area_Code = L.Area_Code;

--16. Display the rank without any gap to show the sales wise rank.
Select *, DENSE_RANK() OVER(order by Sales Desc) as [Rank]
from dbo.fact
order by [Rank];

--17. Find the state wise profit and sales.
Select L.State, SUM(Profit) as [Total Profit], SUM(Sales) as [Total Sales]
from dbo.Location as L
	 left join dbo.fact as F
		on L.Area_Code = F.Area_Code
group by L.State;

--18. Find the state wise profit and sales along with the product name.
Select L.State, P.Product, SUM(Profit) as [Total Profit], SUM(Sales) as [Total Sales]
from dbo.Location as L
	 left join dbo.fact as F
		on L.Area_Code = F.Area_Code
	left join dbo.Product as P
		on P.ProductId = F.ProductId
group by L.State, P.Product
order by L.State, P.Product;

--19. If there is an increase in sales of 5%, calculate the increased sales.
Select Date, ProductId, Area_Code, Sales as [Old Sales], CAST(ROUND(Sales * 1.05, 0) as int) as [New Sales]
from dbo.fact;

--20. Find the maximum profit along with the product ID and producttype.
--assuming for each product
Select P.ProductId, P.Product_Type, MAX(F.Profit) as [Max. Profit]
from dbo.Product as P
	 left join dbo.fact as F
		on P.ProductId = F.ProductId
group by P.ProductId, P.Product_Type;
--or
--assuming for max out of all area wise purchases
Select TOP(1) WITH TIES P.ProductId, P.Product_Type, F.Profit
from dbo.Product as P
	 left join dbo.fact as F
		on P.ProductId = F.ProductId
order by F.Profit DESC;
--or
--assuming max total profit out of all products
Select TOP(1) WITH TIES P.ProductId, P.Product_Type, SUM(F.Profit) as [Total Profit]
from dbo.Product as P
	 left join dbo.fact as F
		on P.ProductId = F.ProductId
group by P.ProductId, P.Product_Type
order by [Total Profit] DESC;

--21. Create a stored procedure to fetch the result according to the product type from Product Table.
Create Procedure dbo.sp_fetch_product_type (@ProductType as nvarchar(50))
as
begin
Select * 
from dbo.Product
where Product_Type = @ProductType;
end

EXEC dbo.sp_fetch_product_type @ProductType = 'Coffee';

--22. Write a query by creating a condition in which if the total expenses is less than 60 then it is a profit or else loss.
Select *, IIF(Total_Expenses < 60, 'Profit', 'Loss') as [Summary]
from dbo.fact;

--23. Give the total weekly sales value with the date and product ID details. Use roll-up to pull the data in hierarchical order.
--Assuming the question is asking for total weekly sales of each product with week start date and productid
With cte as
(
Select *, DATEADD(DAY, 1 - DATEPART(WEEKDAY, Date), Date) as [Week start date]  
from dbo.fact
)
Select [Week start date], ProductId, SUM(Sales) as [Total Weekly Sales]
from cte
group by ROLLUP([Week start date], ProductId)
order by ProductId DESC, [Week start date] DESC;

--24. Apply union and intersection operator on the tables which consist of attribute area code.
Select Area_Code from dbo.Location
Union
Select Area_Code from dbo.fact

Select Area_Code from dbo.Location
Intersect
Select Area_Code from dbo.fact

--25. Create a user-defined function for the product table to fetch a particular product type based upon the user’s preference.
Create function dbo.fn_fetch_product_type (@ProductType as nvarchar(50))
returns table
as
return select * from dbo.Product where Product_Type = @ProductType;

Select * from dbo.fn_fetch_prodcut_type('Coffee')

--26. Change the product type from coffee to tea where product ID is 1 and undo it.
Select * from dbo.Product;

BEGIN TRANSACTION
Update dbo.Product set Product_Type = N'Tea' where ProductId = 1;
Select * from dbo.Product;
Rollback transaction

Select * from dbo.Product;

--27. Display the date, product ID and sales where total expenses are between 100 to 200.
Select Date, ProductId, Sales, Total_Expenses
from dbo.fact
where Total_Expenses between 100 and 200;

--28. Delete the records in the Product Table for regular type.
Delete from dbo.Product where Type = 'Regular';
Select * from dbo.Product;

--29. Display the ASCII value of the fifth character from the column Product.
Select Product, ASCII(SUBSTRING(Product, 5, 1)) as [5th char ASCII]
from dbo.Product;